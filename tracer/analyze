#!/usr/bin/env python3

import shutil
import tempfile
import subprocess
import argparse
import os
import copy
from datetime import datetime
import time


def main(args):
    compile_envs = copy.deepcopy(os.environ)
    compile_envs["LD_LIBRARY_PATH"] = "/usr/lib/x86_64-linux-gnu/debug/"

    tmp_dir = None

    try:
        if args.compile:
            tmp_dir = tempfile.mkdtemp()
            # compile file
            _, src_ext = os.path.splitext(args.src_file)
            if src_ext == '.c':
                cc = 'gcc'
            elif src_ext == '.cpp':
                cc = 'g++'
            else:
                raise NotImplementedError(f'source file extension {src_ext}')

            tmp_file = os.path.join(tmp_dir, 'main' + src_ext)
            tmp_file = shutil.copyfile(args.src_file, tmp_file)
            tmp_path, _ = os.path.splitext(tmp_file)
            compile_cmd_args = [
                cc, '-g', '-O0', '-fno-inline-functions',
                tmp_file,
                '-o', tmp_path
            ]
            if args.verbose:
                compile_cmd_args_str = " ".join(compile_cmd_args)
                print(f'{compile_cmd_args_str=}')
            proc = subprocess.Popen(
                compile_cmd_args, cwd=tmp_dir, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding='utf-8', env=compile_envs)
            stdout = proc.communicate()[0]
            if args.verbose:
                print('proc.stdout:')
                print(stdout)
            if proc.returncode != 0:
                if args.verbose:
                    print(f'Compile exited with code {proc.returncode}')
                return (proc.returncode)
        else:
            tmp_file = args.src_file
            tmp_path, _ = os.path.splitext(tmp_file)

        if not os.path.exists(tmp_path):
            print(f'Missing, must not have compiled: {tmp_path}')
            return

        # construct and run command
        trace_cmd_args = [
            'gdb', tmp_path,
            '-batch', '-nh',
        ]

        r_cmd = f'start < {args.input_file}'
        if args.output_file is not None:
            r_cmd += f' > {args.output_file}'
        trace_asm_cmd = 'trace-asm'
        if args.log_file is not None:
            trace_asm_cmd += f' {args.log_file} {"-v" if args.verbose else ""}'
        if not args.debug_mode:
            trace_cmd_args += [
            '-ex', 'set logging file /dev/null',
            '-ex', 'set logging redirect on',
            '-ex', 'set logging on',
        ]
        trace_cmd_args += [
            '-ex', 'set print elements unlimited',
            '-ex', 'set print repeats unlimited',
            '-ex', 'set max-value-size unlimited',
            '-ex', f'source {trace_script}',
            '-ex', r_cmd,
            '-ex', trace_asm_cmd,
        ]

        if args.verbose:
            trace_cmd_args_str = ' '.join(['"' + a + '"' if any(c.isspace() for c in a) else a for a in trace_cmd_args])
            print(f'{trace_cmd_args_str=}')
        proc = subprocess.Popen(
            trace_cmd_args, cwd=tmp_dir, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding='utf-8')
        try:
            stdout = proc.communicate(timeout=args.timeout)[0]
        except subprocess.TimeoutExpired:
            if args.verbose:
                print(f'Process timed out after {args.timeout} seconds')
            if args.verbose:
                proc.kill()
                stdout = proc.communicate()[0]
                print('(timed out) process stdout:')
                print(stdout)
            return 124  # Same exit code as timeout(1) command on Linux
        if args.verbose:
            print('process stdout:')
            print(stdout)
        if proc.returncode != 0 and args.verbose:
            print(f'Trace exited with code {proc.returncode}')
        return (proc.returncode)
    finally:
        if tmp_dir is not None and not args.keep_tmp:
            shutil.rmtree(tmp_dir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("src_file", help='file to compile and execute')
    parser.add_argument(
        "input_file", help='file from which to redirect program output')
    parser.add_argument(
        "--output_file", help='file to write program output')
    parser.add_argument("--log_file", help='file to write trace log')
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("--debug_mode", action="store_true")
    parser.add_argument("--keep_tmp", action="store_true")
    parser.add_argument("--compile", action="store_true")
    parser.add_argument("--infer_output_files", action="store_true")
    parser.add_argument("--timeout", default=10, type=int)
    args = parser.parse_args()

    problem_id = os.path.basename(
        os.path.dirname(os.path.dirname(args.src_file)))
    solution_id, _ = os.path.splitext(os.path.basename(args.src_file))
    lang_id = args.src_file[args.src_file.rfind('.')+1:]
    input_id, _ = os.path.splitext(os.path.basename(args.input_file))
    run_id = lang_id + '_' + problem_id + '_' + solution_id + '_' + input_id

    begin = datetime.now()
    if args.verbose:
        print(f'{run_id} begin: {begin.isoformat()}')

    if args.infer_output_files:
        if args.verbose:
            print(f'{lang_id=} {problem_id=} {solution_id=}')
        args.output_file = os.path.join(
            'outputs', run_id + '.txt')
        args.log_file = os.path.join(
            'logs', run_id + '.xml')
        if not os.path.exists('outputs'):
            os.mkdir('outputs')
        if not os.path.exists('logs'):
            os.mkdir('logs')
        if args.verbose:
            print(f'{args.output_file=} {args.log_file=}')

    args.input_file = os.path.abspath(args.input_file)
    if args.output_file is not None:
        args.output_file = os.path.abspath(args.output_file)
    if args.log_file is not None:
        args.log_file = os.path.abspath(args.log_file)

    src_file_stem, _ = os.path.splitext(os.path.basename(args.src_file))

    src_dir = os.path.abspath(os.path.dirname(__file__))
    init_gdb = os.path.join(src_dir, 'init.gdb')
    trace_script = os.path.join(src_dir, 'trace_asm.py')

    if args.verbose:
        print(f'{args=} {init_gdb=}')

    return_code = main(args)
    end = datetime.now()
    elapsed = end - begin
    if args.verbose:
        print(f'{run_id} end: {end.isoformat()}')
        print(f'{run_id} elapsed seconds: {elapsed.total_seconds()}')
        print(f'{run_id} exit code: {return_code}')
    exit(return_code)
